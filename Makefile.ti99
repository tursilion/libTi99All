# Paths to TMS9900 compilation tools 
# ( Set in environment to override paths )
TMS9900_DIR?=~/newtms9900-gcc/newgcc9900/bin
ELF2EA5_DIR?=~/gcc9900/bin
EA5_SPLIT_DIR?=~/gcc9900/bin
CLASSIC99_DSK1?=/mnt/d/classic99/DSK1/

# TI uses .$(EXT)
EXT=o

# Full paths to the executables used
GAS=$(TMS9900_DIR)/tms9900-as
LD=$(TMS9900_DIR)/tms9900-ld
CC=$(TMS9900_DIR)/tms9900-gcc
AR=$(TMS9900_DIR)/tms9900-ar
ELF2EA5=$(ELF2EA5_DIR)/elf2ea5
EA5_SPLIT=$(EA5_SPLIT_DIR)/ea5split

LDFLAGS_EA5=\
  --section-start .text=a000 --section-start .data=2080 -M

# specific assembly files
OBJECT_LIST_TIASM=\
  vdp_bmasmdrawlinefast.$(EXT)

# crt replacement functions (SDCC has better ones)
OBJECT_LIST_CRT=\
  str_memcmp.$(EXT)	\
  str_memcpy.$(EXT) \
  str_memset.$(EXT) \
  str_strcmp.$(EXT)	\
  str_strcpy.$(EXT) \
  str_strlen.$(EXT)	\
  str_strncpy.$(EXT) \
  vdp_puts.$(EXT)

# specific assembly files
OBJECT_LIST_EA5=\
  crt0_ea5.$(EXT)

# output file
NAME=libti99.a

# Note: no-function-cse prevents gcc from preferring registers for bl calls
# TODO: as of GCC patches 1.30, peephole2 contains a code-breaking bug so must kill peephole2 to be safe
C_FLAGS=\
  -Os -std=c99 -DTI99 -s --save-temp -I../ -fno-peephole2 -fno-builtin -fno-function-cse

include ../Makefile.sources

# Recipe to compile the library
all: library test example

library: $(OBJECT_LIST) $(OBJECT_LIST_TIASM) $(OBJECT_LIST_CRT)
	$(AR) rcs $(NAME) $(OBJECT_LIST) $(OBJECT_LIST_TIASM) $(OBJECT_LIST_CRT)

test: library testlib.$(EXT) $(OBJECT_LIST_EA5) 
	$(LD) $(OBJECT_LIST_EA5) testlib.$(EXT) $(LDFLAGS_EA5) -L. -lti99 -o testlib.ea5.elf > ea5_testlib.map
	$(ELF2EA5) testlib.ea5.elf testlib.ea5.bin
	$(EA5_SPLIT) testlib.ea5.bin
	cp TESTLI* $(CLASSIC99_DSK1)

example: library example.$(EXT) $(OBJECT_LIST_EA5) 
	$(LD) $(OBJECT_LIST_EA5) example.$(EXT) $(LDFLAGS_EA5) -L. -lti99 -o example.ea5.elf > ea5_example.map
	$(ELF2EA5) example.ea5.elf example.ea5.bin
	$(EA5_SPLIT) example.ea5.bin
	cp EXAMPL* $(CLASSIC99_DSK1)

# Recipe to compile all assembly files
%.$(EXT): ../%.asm
	$(GAS) $< -o $@
%.$(EXT): ../%.assembly
	$(GAS) $< -o $@

# Recipe to compile all C files
%.$(EXT): ../%.c
	$(CC) -c $< $(C_FLAGS) -o $@
