; crt0.s for Sega Master System cart (based on Coleco)
	; Ordering of segments for the linker - copied from sdcc crt0.s
	; The only purpose of this is so that the linker has seen all the
	; sections in the order that we want them applied. Addresses are
	; set by the makefile, or continue on from the last one.
	; Not sure why header doesn't need to be in here... but doesn't matter
	.area _HOME
	.area _CODE
		.ascii "LinkTag:Fixed\0"	; also to ensure there is data BEFORE the banking LinkTags

	.area _INITIALIZER
	.area _GSINIT
	.area _GSFINAL

	; end of list - needed for makemegacart. Must go before RAM areas.
	; This isn't used by anything else and should not contain data
	.area _ENDOFMAP

	; RAM locations        
	.area _DATA
	.area _BSS
	.area _HEAP

	; actual end of mapping order - now the actual code begins. Could this have
	; gone in a separate file before crt0?
	; Anything you don't define will end up here, so gets put into RAM.
	; MakeMegacart should complain loudly if this happens.

	.module crt0
	.globl _main
	.globl _vdpinit
	.globl _my_nmi
	.globl _vdpLimi
    .globl _pause
	.globl l__INITIALIZER
	.globl s__INITIALIZED
	.globl s__INITIALIZER

	.area _HEADER(ABS)
	.org 0x0000

; this is pretty much just the raw Z80 startup area, but there IS a header at 0x7ff0
; https://www.chibiakumas.com/z80/MasterSystemGameGear.php
; https://segaretro.org/Sega_Master_System_Technical_Documentation_(1998-06-10)

    ; RST0 (reset vector)
    di
    jp startprog
    nop
    nop
    nop
    nop

	ei		; RST 0x08
	reti
    nop
    nop
    nop
    nop
    nop

	ei		; RST 0x10
	reti
    nop
    nop
    nop
    nop
    nop

	ei		; RST 0x18
	reti
    nop
    nop
    nop
    nop
    nop

	ei		; RST 0x20
	reti
    nop
    nop
    nop
    nop
    nop

	ei		; RST 0x28
	reti
    nop
    nop
    nop
    nop
    nop

	ei		; RST 0x30
	reti
    nop
    nop
    nop
    nop
    nop

; RST 0x38 - IM1 - VDP interrupt handler - to work like the colecovision we call the NMI function
    jp nmi_entry
    nop
    nop
    nop
    nop
    nop

    ; at 0x40 here, need to pad to 0x66 for the NMI handler

    .rept 0x26
    nop
    .endm

; NMI should be at 0x66 - this is used for the pause button on SMS hardware
; we can set a pause flag, maybe make the next kscan read it as the '*' key
nmi_entry:
	ld hl,#_pause
	ld (hl),#1
    ei
    retn

startprog:
    ; make sure we are in the right interrupt mode
    im 1

	; clear interrupt flag right off
	ld hl,#_vdpLimi
	ld (hl),#0

    ; clear pause button flag
	ld hl,#_pause
	ld (hl),#0

    ; set controller port mode
    ld a,#0xf0
    out (0x3f),a

	; clear RAM before starting (except last 6 bytes)
	ld hl,#0xC000			; set copy source
	ld de,#0xC001			; set copy dest
	ld bc,#0x1ff8			; set bytes to copy (1 less than size)
	ld (hl),#0				; set initial value (this gets copied through)
	ldir					; do it

	; reserved stack space:
	; DFF9 - saved F18A flag
	; DFFA - saved score lsb
	; DFFB - saved score MSB
	; DFFC - inverted score lsb
	; DFFD - inverted score msb
	; DFFE - saved score mode
	; DFFF - attract mode flag

	ld  sp, #0xdfF9			; Set stack pointer directly above top of memory, reserving 7 bytes.
	ld	bc,#0xFFFF			; switch in code bank
    ld  a,#1
   	ld	(bc),a				; note that this does NOT set the local pBank variable, user code still must do that!
	;call gsinit			; Initialize global variables (linker is not setting this up?)
	call _vdpinit			; Initialize video system (also mutes SN)
	call _main
	rst 0x0					; Restart when main() returns.

	.area _BSS
_vdpLimi:					; 0x80 - interrupt set, 0x01 - enabled, other bits used by library
	.ds 1
_pause:                     ; set to 1 when pause button was pressed, kscan reads it
    .ds 1

    .area _CODE
nmi:
; we check the LSB first. If its set, we can call the NMI now.
; otherwise, we set the MSB and let the library handle it on enable.
;
; ** on the master system, this is /not/ an NMI but the port is easier if we
; treat it like it is. The /real/ NMI is only used for the pause button.
	push af					; save flags (none affected, but play safe!)
	push hl

	ld hl,#_vdpLimi
	bit 0,(hl)				; check LSb (enable)
    jp z,notokay
	
; okay, full on call, save off the (other) regs
	push bc
	push de
	;push ix ; saved by callee
	push iy
	call _my_nmi			; call the lib version
	pop iy
	;pop ix
	pop de
	pop bc	
    jp clrup				

notokay:
	set 7,(hl)				; set MSb (flag)

clrup:
	pop hl					
	pop af
    ei
    reti

	.area _GSINIT
gsinit::
	ld	bc, #l__INITIALIZER
	ld	a, b
	or	a, c
	jr	Z, gsinit_next
	ld	de, #s__INITIALIZED
	ld	hl, #s__INITIALIZER
	ldir
gsinit_next:

	.area _GSFINAL
	ret

